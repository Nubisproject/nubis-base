#!/bin/bash

ubuntu_puppet_version="3.7.3-1puppetlabs1"
amazon_linux_puppet_version="3.7.3"

set -e

if [[ -f /etc/debian_version ]]; then
   # Install ec2-ami-tools to support the amazon instance builder. Installing this here vs puppet as
   # this is required for packer, and feels like a better spot to do it instead of in nubis-puppet.
   sudo apt-add-repository multiverse
   sudo apt-get update
   sudo apt-get -y install ec2-ami-tools
   sudo apt-add-repository -r multiverse
   # After removing multiverse we need to rebuild the indexes, since this won't happen on their own.
   sudo apt-get update

   # Install puppetlabs repository, we'll want access to more up to date puppet agents than what's
   # provided in Amazon's repositories.
   wget -O /tmp/puppetlabs-release-precise.deb https://apt.puppetlabs.com/puppetlabs-release-precise.deb
   sudo dpkg -i /tmp/puppetlabs-release-precise.deb
   rm -f /tmp/puppetlabs-release-precise.deb

   # Update repository caches
   sudo apt-get update

   # Apply full system updates
   sudo apt-get -y dist-upgrade

   # Install puppet
   sudo apt-get -y install puppet=${ubuntu_puppet_version} puppet-common=${ubuntu_puppet_version}
elif [[ -f /etc/os-release ]]; then
   . /etc/os-release

   if [[ "$NAME" = "Amazon Linux AMI" ]]; then
      # Install aws-amitools-ec2 to support the amazon instance builder. Installing this here vs puppet as
      # this is required for packer, and feels like a better spot to do it instead of in nubis-puppet.
      sudo yum -y install aws-amitools-ec2

      # Amazon Linux ships with Ruby 2.0, which doesn't work too well with Puppet. We'll need to install
      # 1.8 and set that as the default version.
      sudo yum -y install ruby18-1.8.7.374-2.42.3.amzn1
      sudo alternatives --set ruby /usr/bin/ruby1.8

      # Install puppetlabs repository, we'll want access to more up to date puppet agents than what's
      # provided in Amazon's repositories.
      sudo rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm

      # Amazon's repos ship with priority=10 and they are still shipping Puppet 2.x. Puppet has dependencies
      # which exist in Amazon's repositories so we can't just --disablerepo for the install. After a bit
      # of digging I'm using the method proposed in https://tickets.puppetlabs.com/browse/PUP-2132 which
      # is to simply disable yum priorities.
      sudo sh -c 'echo -e "[main]\nenabled = 0" > /etc/yum/pluginconf.d/priorities.conf'

      # Yum can be stinky
      sudo yum clean all

      # Apply full system updates
      sudo yum -y update

      # Install puppet and rubygem18-json, which someone forgot to add to puppet's dependency list.
      sudo yum -y install puppet-${amazon_linux_puppet_version} rubygem18-json

      # Re-enable yum priorities
      sudo sh -c 'echo -e "[main]\nenabled = 1" > /etc/yum/pluginconf.d/priorities.conf'
   else
      echo "Operating system $NAME unsupported"
      exit 1
   fi
else
   echo "Unknown operating system"
   exit 1
fi

# We have a file provisioner in main.json that'll copy over a .tar.gz of the nubis-puppet tree that's
# created by make. We need to extract that so we can have a full puppet checkout ready for additional build
# iterations.
if [[ -f /tmp/nubis-puppet.tar.gz ]]; then
   sudo tar -C /etc -zxf /tmp/nubis-puppet.tar.gz
   rm -f /tmp/nubis-puppet.tar.gz

   # If puppet.conf exists in nubis-puppet, let's copy that over to /etc/puppet.
   if [[ -f /etc/nubis-puppet/puppet.conf ]]; then
      sudo cp -f /etc/nubis-puppet/puppet.conf /etc/puppet/puppet.conf
   fi

   # We're probably going to have secrets at some point. I use chown 0:0 to avoid having to figure out
   # whether root's group is root, or wheel.
   sudo chown 0:0 /etc/nubis-puppet
   sudo chmod 700 /etc/nubis-puppet

   # Document the installed version of packages for forensic analysis later, if needed.
   puppet resource package | sudo tee -a /etc/nubis-puppet/package-versions.pp
fi

# We copy this file over in main.json, but it needs to run at boot so we run this little shell snippit
# as part of the bootstrap process.
if [[ -f /tmp/autojoin.sh ]]; then
   sudo mkdir /etc/nubis.d
   sudo mv /tmp/autojoin.sh /etc/rc.local
   sudo chmod 755 /etc/rc.local
fi
