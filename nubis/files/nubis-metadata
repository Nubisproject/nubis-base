#!/bin/bash

set -e

METADATA_DIRECTORY='/var/cache/nubis'
USERDATA_FILE="${METADATA_DIRECTORY}/userdata"
INSTANCE_IDENTITY_FILE="${METADATA_DIRECTORY}/instance-identity"
INSTANCE_IDENTITY_JSON="${METADATA_DIRECTORY}/instance-identity.json"
METADATA_URL_PREFIX=http://169.254.169.254/latest
#PARENT_COMMAND="$(ps -o comm= $PPID)"
PARENT_ARGUMENTS="$(ps -o args= $PPID)"

if [ ! -d "${METADATA_DIRECTORY}" ]; then
    mkdir "${METADATA_DIRECTORY}" || exit 1
fi

show-help() {
    echo -en "Usage: ${0} [options] command\\n\\n"
    echo -en "Commands:\\n"
    echo -en "  init               Initialize the userdata and instance-identity files\\n"
    echo -en "                       This is intended to be run on boot by root\\n"
    echo -en "  show-userdata      Print out all VALUEs in userdata\\n"
    echo -en "  show-identity      Print out all VALUEs in instance-identity\\n"
    echo -en "  update-userdata    Refresh userdata in case it has changed\\n"
    echo -en "  [VALUE]            Print out the named VALUE\\n"
    echo -en "                       This is the default behavior as in:\\n"
    echo -en "                       '${0} NUBIS_PROJECT'\\n\\n"
    echo -en "Options:\\n"
    echo -en "  --help       -h    Print this help information and exit\\n"
    echo -en "  --setx       -x    Turn on bash setx, should be set before other arguments\\n"
    echo -en "                       Basically set -x\\n\\n"
}

initialize-userdata() {
    # IF cloud-init is present, rely on it creating ${USERDATA_FILE}
    #+ Else generate ${USERDATA_FILE} from user-data
    if curl --retry 5 -fqs $METADATA_URL_PREFIX/user-data | grep -qs '^#cloud-config'; then
        # Test if cloud-init is going to create ${USERDATA_FILE}
        #+ If so, wait till the file is created before returning
        #+ Else return 0 as this is probably a build job
        if curl --retry 5 -fqs $METADATA_URL_PREFIX/user-data | grep -qs "${USERDATA_FILE}"; then
            COUNT=0
            until [ -f  "${USERDATA_FILE}" ]; do
                # If we do not have ${USERDATA_FILE} after 60 seconds, bail out
                if [ (( COUNT ++ )) == 12 ]; then
                    echo -e "\\n\\033[1;31mERROR: Timeout waiting for ${USERDATA_FILE}\\033[0m\\n" 1>&2
                    echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
                    exit 1
                fi
                echo -e "\\n\\033[0;32mNOTICE: ${USERDATA_FILE} not yet created, sleep 5\\033[0m" 1>&2
                echo -e "\\n\\033[0;32mNOTICE: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
                sleep 5
            done
        else
            return 0
        fi
    else
        # If the userdata file exists, remove it
        if [ -f "${USERDATA_FILE}" ]; then
            rm -f "${USERDATA_FILE:-'NO_SUCH_FILE'}" || exit 1
        fi

        # Grab the user-data from the metadata endpoint
        if ! curl --retry 5 -fqs -o "${USERDATA_FILE}" "${METADATA_URL_PREFIX}/user-data" ; then
            echo -e "\\n\\033[1;31mERROR: Failed getting userdata! \\033[0m\\n" 1>&2
            echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
            exit 1
        fi
    fi
}

initialize-instance-identity() {
    # If the instance-identity.json file exists, remove it
    if [ -f "${INSTANCE_IDENTITY_JSON}" ]; then
        rm -f "${INSTANCE_IDENTITY_JSON:-'NO_SUCH_FILE'}" || exit 1
    fi

    # Grab the instance-identity/document from the metadata endpoint
    if ! curl --retry 5 -fqs -o "${INSTANCE_IDENTITY_JSON}" "${METADATA_URL_PREFIX}/dynamic/instance-identity/document" ; then
        echo -e "\\n\\033[1;31mERROR: Failed getting instance-identity/document! \\033[0m\\n" 1>&2
        echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
        exit 1
    fi

    # If the instance-identity.json file exists, remove it
    if [ -f "${INSTANCE_IDENTITY_FILE}" ]; then
        rm -f "${INSTANCE_IDENTITY_FILE:-'NO_SUCH_FILE'}" || exit 1
    fi

    # Create instance identity bash file using json file as source
    if [ -f "${INSTANCE_IDENTITY_JSON}" ]; then
        {
            echo "INSTANCE_IDENTITY_PRIVATEIP=\"$(jq -r .privateIp "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_INSTANCEID=\"$(jq -r .instanceId "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_INSTANCETYPE=\"$(jq -r .instanceType "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_AVAILABILITYZONE=\"$(jq -r .availabilityZone "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_ACCOUNTID=\"$(jq -r .accountId "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_ARCHITECTURE=\"$(jq -r .architecture "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_IMAGEID=\"$(jq -r .imageId "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_PENDINGTIME=\"$(jq -r .pendingTime "${INSTANCE_IDENTITY_JSON}")\""; \
            echo "INSTANCE_IDENTITY_REGION=\"$(jq -r .region "${INSTANCE_IDENTITY_JSON}")\""
        } > "${INSTANCE_IDENTITY_FILE}"
    else
        echo -e "\\n\\033[1;31mERROR: instance-identity.json file does not exist! \\033[0m" 1>&2
        echo -e "\\033[1;31mERROR: unable to create instance-identity file.\\033[0m\\n" 1>&2
        echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
        exit 1
    fi
}

show-userdata () {
    # Make sure the userdata file exists
    if [ ! -f "${USERDATA_FILE}" ]; then
        echo -e "\\n\\033[1;31mERROR: ${USERDATA_FILE} does not exist! \\033[0m" 1>&2
        echo -e "\\033[1;31mERROR: Perhaps you need to ${0} init\\033[0m\\n" 1>&2
        echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
        exit 1
    fi
    if [ "${1}" ]; then
        # shellcheck source=/dev/null
        source "${USERDATA_FILE}" 2>/dev/null
        eval VALUE="\$${1}"
        echo "${VALUE}"
    else
        cat "${USERDATA_FILE}"
    fi
}

show-instance-identity () {
    # Make sure the userdata file exists
    if [ ! -f "${INSTANCE_IDENTITY_FILE}" ]; then
        echo -e "\\n\\033[1;31mERROR: ${INSTANCE_IDENTITY_FILE} does not exist! \\033[0m" 1>&2
        echo -e "\\033[1;31mERROR: Perhaps you need to ${0} init\\033[0m\\n" 1>&2
        echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
        exit 1
    fi
    if [ "${1}" ]; then
        # shellcheck source=/dev/null
        source "${INSTANCE_IDENTITY_FILE}" 2>/dev/null
        eval VALUE="\$${1}"
        echo "${VALUE}"
    else
        cat "${INSTANCE_IDENTITY_FILE}"
    fi
}

while [ "${1}" != "" ]; do
    case ${1} in
        -h | --help | help )
            show-help
            exit 0
        ;;
        -x | --debug | --setx )
            shift
            set -x
        ;;
        status )
            shift
            if [ -f "${INSTANCE_IDENTITY_FILE}" ] && [ -f "${USERDATA_FILE}" ]; then
                echo "ready"
            else
                echo "not-ready"
            fi
            GOT_COMMAND=1
        ;;
        init )
            shift
            initialize-userdata
            initialize-instance-identity
            GOT_COMMAND=1
        ;;
        show-userdata )
            shift
            show-userdata
            GOT_COMMAND=1
        ;;
        show-identity )
            shift
            show-instance-identity
            GOT_COMMAND=1
        ;;
            update-userdata )
            shift
            initialize-userdata
            GOT_COMMAND=1
        ;;
        * )
            # Lets be nice and upcase any requests
            #+ Also trun hyphen into underscore (bash does not allow hyphen in variable names)
            UPCASE="$(tr '[:lower:]-' '[:upper:]_' <<< "${1}")"
            # Check for the value in userdata first
            VALUE="$(show-userdata "${UPCASE}")"
            # Check for the value in instance-identity second
            if [ ! "${VALUE}" ]; then
                VALUE="$(show-instance-identity "${UPCASE}")"
            fi
            # If we did not get a value, raise an error
            #+ otherwise return the value
            if [ ! "${VALUE}" ]; then
                echo -e "\\n\\033[1;31mERROR: No such VALUE: '${UPCASE}'\\033[0m\\n" 1>&2
                echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
                exit 1
            else
                echo "${VALUE}"
            fi
            shift
            # We do not support requesting multiple VALUES at onece
            if [ "${1}" ]; then
                echo -e "\\n\\033[1;31mERROR: ${0} does not support multiple VALUE lookups.\\033[0m\\n" 1>&2
                echo -e "\\n\\033[1;31mERROR: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
                exit 1
            fi
            GOT_COMMAND=1
        ;;
    esac
done

# If we did not get a valid command print the help message
if [ "${GOT_COMMAND:-0}" == 0 ]; then
    echo -e "\\n\\033[0;32mWARNING: Usage 'nubis-metadata DESIRED_VALUE'\\033[0m" 1>&2
    echo -e "\\033[0;32mWARNING: You should not source this file as that will be depricated in a future release.\\033[0m" 1>&2
    echo -e "\\n\\033[0;32mWARNING: Called by:'${PARENT_ARGUMENTS}'\\033[0m\\n" 1>&2
    show-userdata
fi
