#!/bin/sh

# This is an auto-joiner for consul, should be moved to /etc/nubis.d/00-consul-bootstrap or similar

eval `curl -fq http://169.254.169.254/latest/user-data`

INSTANCE_ID=`curl -fq http://169.254.169.254/latest/meta-data/instance-id`
REGION=`curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq '.region' -r`

CONSUL_DC="${NUBIS_ENVIRONMENT}-${REGION}-${NUBIS_ACCOUNT}"
CONSUL_SERVICE_NAME="consul"

CONSUL_DOMAIN="$CONSUL_SERVICE_NAME.$NUBIS_ENVIRONMENT.$REGION.$NUBIS_ACCOUNT.$NUBIS_DOMAIN"

# The HTTP endpoint, constructed
CONSUL_UI="http://ui.$CONSUL_DOMAIN"

# Auto-discover secret
if [ -z "$CONSUL_SECRET" ]; then
  # check for an on-disk secret
  if [ -f /etc/consul/consul.secret ]; then
    SECRET=$(cat /etc/consul/consul.secret)
  fi
  
  # discover via Consul
  if [ -z "$SECRET" ]; then
    SECRET=`curl -f -s $CONSUL_UI/v1/kv/environments/$NUBIS_ENVIRONMENT/global/consul/secret?raw`
  fi
  
  if [ ! -z "$SECRET" ]; then
    CONSUL_SECRET=$SECRET
  fi

fi

cat <<EOF | tee /etc/consul/zzz-startup.json
{
  "datacenter": "$CONSUL_DC",
  "node_name": "$INSTANCE_ID"
}
EOF

if [ ! -f /etc/consul/zzz-join.skip ]; then
  # Auto-discover initial servers with fallback to $CONSUL_JOIN, just in case
  CONSUL_JOIN="$CONSUL_DOMAIN"
  SERVERS=`curl -qfs $CONSUL_UI/v1/status/peers | jq ". |= .+ [\"$CONSUL_JOIN\"]" | perl -pe's/:\d+//g'`

  if [ "$SERVERS" ]; then
  cat <<EOF | tee /etc/consul/zzz-join.json
{
  "retry_join": $SERVERS
}
EOF
  fi
fi

# Discover our ACL token (needs moving to nubis-consul)
if [ "$CONSUL_ACL_TOKEN" ]; then

cat <<EOF | tee /etc/consul/zzz-acl-token.json
{
  "acl_token": "$CONSUL_ACL_TOKEN"
}
EOF
fi

# Auto-discover certificate and key
if [ ! -f /etc/consul/consul.pem ]; then
  curl -f -s -o /etc/consul/consul.pem $CONSUL_UI/v1/kv/environments/$NUBIS_ENVIRONMENT/global/consul/cert?raw
fi
if [ ! -f /etc/consul/consul.key ]; then
  curl -f -s -o /etc/consul/consul.key $CONSUL_UI/v1/kv/environments/$NUBIS_ENVIRONMENT/global/consul/key?raw
fi

if [ -f /etc/consul/consul.pem ]; then
  chown root:consul /etc/consul/consul.pem
  chmod 640 /etc/consul/consul.pem
fi

if [ -f /etc/consul/consul.key ]; then
  chown root:consul /etc/consul/consul.key
  chmod 640 /etc/consul/consul.key
fi

if [ -f /etc/consul/consul.secret ]; then
  chown root:consul /etc/consul/consul.secret
  chmod 640 /etc/consul/consul.secret
fi

# Sanity, if we didn't get all this, something wrong is going on
if [ "$CONSUL_SECRET" ] && [ -f /etc/consul/consul.key ] && [ -f /etc/consul/consul.pem ]; then
cat <<EOF | tee /etc/consul/zzz-tls.json
{
  "encrypt"         : "$CONSUL_SECRET",
  "ca_file"         : "/etc/consul/consul.pem",
  "cert_file"       : "/etc/consul/consul.pem",
  "key_file"        : "/etc/consul/consul.key",
  "verify_incoming" : true,
  "verify_outgoing" : true
}
EOF
else
  echo "Failed to configure security, Consul is most likely broken!"
fi

# RHEL sysv consul init scripts are buggy
# https://github.com/nubisproject/nubis-base/issues/247
OSFAMILY=$(facter osfamily)
SERVICE=$(which service)
if [ "$OSFAMILY" = "RedHat" ]; then
  DAEMONIZE="daemonize"
fi

# Perform a clean nuke and restart of Consul
service consul stop
rm -rf /var/lib/consul/serf/*
$DAEMONIZE $SERVICE consul start

### XXX: Wait for consul to start here
